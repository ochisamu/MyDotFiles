"プラグイン管理
filetype off

if has('vim_starting')
	set runtimepath+=~/.vim/neobundle
	call neobundle#rc(expand('~/.vim/bundle/neobundle'))
endif

NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/vimproc'
NeoBundle 'Shougo/neocomplcache'
NeoBundle 'Shougo/neocomplcache-snippets-complete'
NeoBundle 'Shougo/vimshell'
NeoBundle 'Shougo/vimfiler'
NeoBundle 'Shougo/echodoc'
NeoBundle 'tomtom/tcomment_vim'
NeoBundle 'thinca/vim-ref'
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'vim-jp/vimdoc-ja'
NeoBundle 'surround.vim'
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'scrooloose/syntastic'
"NeoBundle 'nvie/vim-flake8'
NeoBundle 'mattn/sonictemplate-vim'

NeoBundle 'molokai'
NeoBundle 'fakeclip'
NeoBundle 'buftabs'
NeoBundle 'smartchr'
NeoBundle 'DrawIt'
NeoBundle 'errormarker.vim'
NeoBundle 'JavaScript-syntax'
NeoBundle 'compilerpython.vim'
NeoBundle 'sudo.vim'
"NeoBundle 'git://github.com/Shougo/vim-vcs.git'
"NeoBundle 'git://github.com/Shougo/vinarise.git'

filetype indent on
filetype on

"sonictemplate
  let g:sonictemplate_vim_template_dir = [
  \ '$HOME/.vim/template'
  \]

"GUIの設定  
set guioptions-=T "ツールバーなし
set guioptions-=m "メニューバーなし
set guioptions-=r "右スクロールバーなし
set guioptions-=R
set guioptions-=l "左スクロールバーなし
set guioptions-=L
set guioptions-=b "下スクロールバーなし

"キーマップ
nnoremap Y y$
nnoremap <silent> <Space><Space>  :<C-u>edit $MYVIMRC<CR>
nnoremap <silent> <F5> :<C-u>source $MYVIMRC<CR>
nnoremap <silent> <C-l> :bnext<CR>
nnoremap <silent> <C-h> :bprev<CR>

nnoremap <silent><C-j> <C-w>w
nnoremap <silent><C-k> <C-w>w
"nnoremap <silent><C-l> <C-w>l
"nnoremap <silent><C-h> <C-w>h

nnoremap <silent> <C-l> :bnext<CR>
nnoremap <silent> <C-h> :bprev<CR>

nnoremap <C-i> :<C-u>help<Space>
nnoremap <C-i><C-i> :<C-u>help<Space><C-r><C-w><CR> 

nnoremap ,bd :<C-u>Kwbd<CR>
inoremap <silent> <C-j> <C-r>=IMState('FixMode')<CR>
imap <C-j> <Down>
imap <C-k> <Up>
imap <C-h> <Left>
imap <C-l> <Right>

imap OA <Up>
imap OB <Down>
imap OC <Right>
imap OD <Left>
"色とか
set t_Co=256
if has('gui_running')
	colorscheme vitamins
else
	colorscheme vitamins
endif
syntax on
set number
set linespace=4
set visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

"インデント,タブ,クリップボード
set autoindent
set cindent
set shiftwidth=4
set tabstop=4
set backspace=indent,eol,start
set clipboard=unnamed,autoselect
set hidden


"検索結果のハイライトをESC連打で消す
set hlsearch
noremap <Esc><Esc> :nohlsearch<CR><Esc>

"ステータスラインの設定
set statusline=%t\%=[%{(&fenc!=''?&fenc:&enc)}/%{&ff}]\[%03l,%03v]

"ステータスライン表示位置(下から)
set laststatus=2

"文字エンコードをutf-8に固定
set fileencoding=utf-8
set fileencodings=euc-jp,ucs-bom,utf-8,iso-2022-jp,cp932,utf-16,utf-16le

"インクリメンタルサーチ
set incsearch

"バッファ表示
let g:buftabs_only_basename = 1
"let g:buftabs_in_statusline=1
" 現在のバッファ名をハイライトする
"let g:buftabs_active_highlight_group="Visual"

" 現在行のハイライト
augroup cch
	autocmd! cch
	autocmd WinLeave * set nocursorline
	autocmd WinEnter,BufRead * set cursorline
augroup END
:hi clear CursorLine
highlight CursorLine ctermbg=241 guibg=#444444

"VimFilerq
let g:vimfiler_as_default_explorer = 1

"Ref.vim
let g:ref_source_webdict_sites = {
			\   'wikipedia:ja': 'http://ja.wikipedia.org/wiki/%s',
			\   }
let g:ref_source_webdict_sites = {
			\   'alc': {
			\     'url': 'http://eow.alc.co.jp/%s',
			\     'keyword_encoding': 'utf-8',
			\     'cache': 1,
			\   }
			\ }
function! g:ref_source_webdict_sites.alc.filter(output)
	return join(split(a:output, "\n")[34 :], "\n")
endfunction
let g:ref_source_webdict_sites.default = 'alc'

"補完
let g:neocomplcache_enable_at_startup = 1
function! InsertTabWrapper()
	if pumvisible()
		return "\<c-n>"
	endif
	let col = col('.') - 1
	if !col || getline('.')[col - 1] !~ '\k\|<\|/'
		return "\<tab>"
	elseif exists('&omnifunc') && &omnifunc == ''
		return "\<c-n>"
	else
		return "\<c-x>\<c-o>"
	endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>

"SNIPPETS
imap <C-X> <Plug>(neocomplcache_snippets_expand)
smap <C-x> <Plug>(neocomplcache_snippets_expand)

" VimShell VimFiler
nnoremap ,vf :<C-u>VimFiler<CR>
nnoremap ,vs :<C-u>VimShell<CR>

" create directory automatically
augroup vimrc-auto-mkdir
    autocmd!
    autocmd BufWritePre * call s:auto_mkdir(expand('<afile>:p:h'), v:cmdbang)
    function! s:auto_mkdir(dir, force)
        if !isdirectory(a:dir) && (a:force ||
            \ input(printf('"%s" does not exist. Create? [y/N]', a:dir)) =~? '^y\%[es]$')
            call mkdir(iconv(a:dir, &encoding, &termencoding), 'p')
        endif
    endfunction
augroup END


" uniteの設定 ======================================
" 入力モードで開始する
"let g:unite_enable_start_insert=1
"let g:unite_enable_split_vertically = 1 "縦分割で開く
"let g:unite_winwidth = 40 "横幅40で開く
" バッファ一覧
nnoremap ,ub :<C-u>Unite buffer<CR>
" ファイル一覧
nnoremap ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
" レジスタ一覧
nnoremap ,ur :<C-u>Unite -buffer-name=register register<CR>
" 最近使用したファイル一覧
nnoremap ,um :<C-u>Unite file_mru<CR>
" 常用セット
nnoremap ,uu :<C-u>Unite buffer file_mru<CR>
" 全部乗せ
"nnoremap ,ua :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>

" syntastic
let g:syntastic_mode_map = { 'mode': 'active',
  \ 'active_filetypes': ['python', 'yaml'],
  \ 'passive_filetypes': ['php'] }

"fileごとの設定 ======================================== 
" javascript
autocmd FileType javascript :compiler gjslint
"autocmd QuickfixCmdPost make copen

"im_contrtol
let IM_CtrlIBusPython = 1
